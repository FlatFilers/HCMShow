// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyName String

  users        User[]
  employees    Employee[]
  actions      Action[]
  jobs         Job[]
  benefitPlans BenefitPlan[]
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String @unique @db.Text
  password  String
  firstName String
  lastName  String

  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])

  actions     Action[]
  spaces      Space[]
  customField CustomField[]
  options     Options[]
}

model Action {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        String
  description String
  metadata    Json   @default("{}") @db.JsonB

  userId         String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Employee {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managerId String?   @db.Uuid
  manager   Employee? @relation("Manager", fields: [managerId], references: [id])

  employeeId           String
  firstName            String
  lastName             String
  employeeTypeId       String       @db.Uuid
  employeeType         EmployeeType @relation(fields: [employeeTypeId], references: [id])
  hireDate             DateTime
  endEmploymentDate    DateTime?
  job                  Job          @relation(fields: [jobId], references: [id])
  jobId                String       @db.Uuid
  positionTitle        String
  defaultWeeklyHours   Float
  scheduledWeeklyHours Float

  // App fields
  directReports    Employee[]            @relation("Manager")
  flatfileRecordId String?
  organizationId   String                @db.Uuid
  organization     Organization          @relation(fields: [organizationId], references: [id])
  benefitPlans     EmployeeBenefitPlan[]

  @@unique([organizationId, employeeId])
}

model EmployeeType {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String     @unique
  slug      String     @unique
  employees Employee[]
}

model EmployeeBenefitPlan {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String   @db.Uuid
  employee   Employee @relation(fields: [employeeId], references: [id])

  benefitPlanId String      @db.Uuid
  benefitPlan   BenefitPlan @relation(fields: [benefitPlanId], references: [id])

  currentlyEnrolled     Boolean  @default(false)
  coverageBeginDate     DateTime @default(now())
  employeerContribution Float    @default(0)
  benefitCoverageType   String

  @@id([employeeId, benefitPlanId])
}

model JobFamily {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  slug          String    @unique
  effectiveDate DateTime?
  summary       String?
  isInactive    Boolean

  jobs Job[]
}

model Job {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug           String
  name           String
  department     String
  effectiveDate  DateTime
  isInactive     Boolean
  jobFamilyId    String?      @db.Uuid
  jobFamily      JobFamily?   @relation(fields: [jobFamilyId], references: [id])
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]

  @@unique([organizationId, slug])
}

model Space {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type            String
  flatfileSpaceId String @unique
  flatfileData    Json   @db.JsonB

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model BenefitPlan {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String
  name String

  organizationId String                @db.Uuid
  organization   Organization          @relation(fields: [organizationId], references: [id])
  employees      EmployeeBenefitPlan[]

  @@unique([organizationId, slug])
}

model CustomField {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  type        String
  required    Boolean
  dateFormat  String?
  decimals    Int?
  enumOptions Json?   @db.JsonB

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Options {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  options Json? @db.JsonB

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Department {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentCode String @unique
  departmentName String
}
