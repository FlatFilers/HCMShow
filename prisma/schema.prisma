// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique

  users User[]
  employees Employee[]
  actions Action[]
}

model User {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique @db.Text
  password String 

  organizationId String @db.Uuid
  organization Organization @relation(fields: [organizationId], references: [id])

  actions Action[]
  spaces Space[]
}

model Action {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String
  description String
  metadata Json @db.JsonB @default("{}")

  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id])
  organizationId String @db.Uuid
  organization Organization @relation(fields: [organizationId], references: [id])
}

model Employee {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managerId String? @db.Uuid
  manager Employee? @relation("Manager", fields: [managerId], references: [id])

  // FF fields
  employeeId String 
  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])
  titleId String? @db.Uuid
  title Title? @relation("Title", fields: [titleId], references: [id])
  firstName String 
  middleName String?
  lastName String
  socialSuffixId String? @db.Uuid
  socialSuffix Title? @relation("SocialSuffix", fields: [socialSuffixId], references: [id])
  employeeTypeId String @db.Uuid
  employeeType EmployeeType @relation(fields: [employeeTypeId], references: [id])
  hireReasonId String @db.Uuid
  hireReason HireReason @relation(fields: [hireReasonId], references: [id])
  hireDate DateTime
  endEmploymentDate DateTime?
  jobs EmployeesJobs[]
  positionTitle String
  businessTitle String?
  locationId String @db.Uuid
  location Location @relation("Location", fields: [locationId], references: [id])
  workspaceId String? @db.Uuid
  workspace Location? @relation("Workspace", fields: [workspaceId], references: [id])
  positionTimeId String @db.Uuid
  positionTime PositionTime @relation(fields: [positionTimeId], references: [id])
  workShiftId String? @db.Uuid
  workShift WorkShift? @relation(fields: [workShiftId], references: [id])
  defaultWeeklyHours Float
  scheduledWeeklyHours Float
  payRateId String @db.Uuid
  payRate PayRate @relation(fields: [payRateId], references: [id])
  additionalJobClassificationId String? @db.Uuid
  additionalJobClassification AdditionalJobClassification? @relation(fields: [additionalJobClassificationId], references: [id])
  workerCompensationCodeId String @db.Uuid
  workerCompensationCode WorkerCompensationCode @relation(fields: [workerCompensationCodeId], references: [id])
  
  addresses AddressEmployee[]
  phoneNumbers PhoneNumberEmployee[]
  emailAddresses EmailAddressEmployee[]

  // App fields
  directReports Employee[] @relation("Manager")
  // todo: remove name
  name String?
  flatfileRecordId String?
  organizationId String @db.Uuid
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, employeeId])
}

model EmployeeType {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique
  description String?
  isFixedTerm Boolean
  isSeasonal Boolean
  isTrainee Boolean
  isInactive Boolean

  employees Employee[]
  countries EmployeeTypeCountry[] 
}

model EmployeeTypeCountry {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeTypeId String @db.Uuid
  employeeType EmployeeType @relation(fields: [employeeTypeId], references: [id])

  countryId String @db.Uuid
  country Country @relation(fields: [countryId], references: [id])

  @@id([employeeTypeId, countryId])
}

model EmployeesJobs {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String @db.Uuid
  employee Employee @relation(fields: [employeeId], references: [id])

  jobId String @db.Uuid
  job Job @relation(fields: [jobId], references: [id])

  @@id([employeeId, jobId])
}

model Country {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String 
  type String
  code String @unique

  employees Employee[]
  employeeTypes EmployeeTypeCountry[]
  locations Location[]
  workShifts WorkShift[]
  titles Title[]
  addresses Address[]
  phoneNumbers PhoneNumber[]
  additionalJobClassifications AdditionalJobClassification[]
}

model CountryRegion {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String 
  type String
  code String @unique

  addresses Address[]
}

model HireReason {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String 
  category String
  isInactive Boolean
  classificationName String
  classificationSlug String
  subcategorySlug String @unique
  reason String
  isManagerReason Boolean

  employees Employee[]
}


model JobFamily {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique
  effectiveDate DateTime?
  summary String?
  isInactive Boolean

  jobs Job[]
}

model Job {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique
  effectiveDate DateTime
  isInactive Boolean
  includeJobCodeInName Boolean?
  title String?
  summary String
  description String
  additionalDescription String?
  workShift Boolean?
  jobPublic Boolean

  jobFamilyId String? @db.Uuid
  jobFamily JobFamily? @relation(fields: [jobFamilyId], references: [id])
  employees EmployeesJobs[]
}

// WIP 
model Location {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique
  effectiveDate DateTime
  // location usage id req rel
  isInactive Boolean
  latitude Float?
  longitude Float?
  altitude Float?

  // time profile id
  // locale id
  // time zone id
  // currency id

  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])

  locationEmployees Employee[] @relation("Location")
  workspaceEmployees Employee[] @relation("Workspace")
}

model PositionTime {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String @unique
  name String

  employees Employee[]
}

model WorkShift {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String
  name String
  description String?

  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])

  isInactive Boolean

  employees Employee[]
}

model PayRate {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique
  isInactive Boolean
  // TODO: should be an association
  frequency String?

  employees Employee[]
}

model AdditionalJobClassification { 
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])
  slug String @unique
  jobClassificationId String
  description String
  isInactive Boolean

  employees Employee[]
}

// WIP
model WorkerCompensationCode { 
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees Employee[]
}

model Space {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String 
  flatfileData Json @db.JsonB

  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id])
}

model Title {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])
  slug String @unique
  titleTypeId String? @db.Uuid
  titleType TitleType? @relation(fields: [titleTypeId], references: [id])
  value String

  employeesWithTitles Employee[] @relation("Title")
  employeesWithSuffixes Employee[] @relation("SocialSuffix")
}

model TitleType {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  titles Title[]
}

model Address {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addressId String @unique
  effectiveDate DateTime?
  city String
  state String
  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])
  addressLineTypeId String? @db.Uuid
  addressLineType AddressLineType? @relation("AddressLine", fields: [addressLineTypeId], references: [id])
  addressLineData String?
  municipality String?
  submunicipalityTypeId String? @db.Uuid
  submunicipality AddressLineType? @relation("Submunicipality", fields: [submunicipalityTypeId], references: [id])
  submunicipalityData String?
  countryRegionId String? @db.Uuid
  countryRegion CountryRegion? @relation(fields: [countryRegionId], references: [id])
  subregionTypeId String? @db.Uuid
  subregion AddressLineType? @relation("Subregion", fields: [subregionTypeId], references: [id])
  subregionData String?
  postalCode String?
  isPublic Boolean
  isPrimary Boolean
  typeId String? @db.Uuid
  type CommunicationUsageType? @relation(fields: [typeId], references: [id])
  useForId String? @db.Uuid
  useFor CommunicationUsageBehaviorType? @relation(fields: [useForId], references: [id])
  municipalityLocal String?

  employees AddressEmployee[]
}

model AddressEmployee {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addressId String @db.Uuid
  address Address @relation(fields: [addressId], references: [id])
  employeeId String @db.Uuid
  employee Employee @relation(fields: [employeeId], references: [id])

  @@id([addressId, employeeId])
}

model AddressLineType {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String @unique
  name String

  addressLines Address[] @relation("AddressLine")
  submunicipalities Address[] @relation("Submunicipality")
  subregions Address[] @relation("Subregion")
}

model CommunicationUsageType {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name String
  slug String @unique

  addresses Address[]
  phoneNumbers PhoneNumber[]
  emailAddresses EmailAddress[]
}

model CommunicationUsageBehaviorType {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name String
  slug String @unique

  addresses Address[]
  phoneNumbers PhoneNumber[]
  emailAddresses EmailAddress[]
}

model PhoneNumber {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  countryId String? @db.Uuid
  country Country? @relation(fields: [countryId], references: [id])
  internationalPhoneCode String?
  phoneNumber String?
  phoneExtension String?
  phoneDeviceTypeId String? @db.Uuid
  phoneDeviceType PhoneDeviceType? @relation(fields: [phoneDeviceTypeId], references: [id])
  isPublic Boolean
  isPrimary Boolean
  typeId String? @db.Uuid
  type CommunicationUsageType? @relation(fields: [typeId], references: [id])
  useForId String? @db.Uuid
  useFor CommunicationUsageBehaviorType? @relation(fields: [useForId], references: [id])

  employees PhoneNumberEmployee[]
}

model PhoneNumberEmployee {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phoneNumberId String @db.Uuid
  phoneNumber PhoneNumber @relation(fields: [phoneNumberId], references: [id])
  employeeId String @db.Uuid
  employee Employee @relation(fields: [employeeId], references: [id])

  @@id([phoneNumberId, employeeId])
}

model PhoneDeviceType {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String
  type String
  mapsToCode String?
  isDefaultPhoneDeviceType Boolean
  shouldHideForRecruiting Boolean
  isInactive Boolean

  phoneNumbers PhoneNumber[]
}

model EmailAddress {
  id String @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailAddress String?
  emailComment String?
  isPublic Boolean
  isPrimary Boolean
  typeId String? @db.Uuid
  type CommunicationUsageType? @relation(fields: [typeId], references: [id])
  useForId String? @db.Uuid
  useFor CommunicationUsageBehaviorType? @relation(fields: [useForId], references: [id])

  employees EmailAddressEmployee[]
}

model EmailAddressEmployee {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailAddressId String @db.Uuid
  emailAddress EmailAddress @relation(fields: [emailAddressId], references: [id])
  employeeId String @db.Uuid
  employee Employee @relation(fields: [employeeId], references: [id])

  @@id([emailAddressId, employeeId])
}
